
const x = 3;
const y = 2;
const z = 1;
const gData:any[] = [];

const generateData = (_level:any, _preKey?:any, _tns?:any) => {
  const preKey = _preKey || '0';
  const tns = _tns || gData;

  const children = [];
  for (let i = 0; i < x; i++) {
    const key = `${preKey}-${i}`;
    tns.push({ title: key, key });
    if (i < y) {
      children.push(key);
    }
  }
  if (_level < 0) {
    return tns;
  }
  const level = _level - 1;
  children.forEach((key, index) => {
    tns[index].children = [];
    return generateData(level, key, tns[index].children);
  });
};
generateData(z)

const dataList:any = [];
const generateList = (data:any) => {
  for (let i = 0; i < data.length; i++) {
    const node = data[i];
    const { key } = node;
    dataList.push({ key, title: key });
    if (node.children) {
      generateList(node.children);
    }
  }
};
generateList(gData)

const search = (e:any)=>{
	debugger
	const { value } = e.target;
	const expandedKeys = dataList
	// .map((item:any) => {
	// 	return null;
	// })
	.filter((item:any, i:number, self:any) => item && self.indexOf(item) === i)
	setTree({
		expandedKeys,
		searchValue: value,
		autoExpandParent: false,
	})
}	
const nodeExpand = (expandedKeys:any) => {
	setTree({
		expandedKeys,
		searchValue:'',
		autoExpandParent: false,
	})
};

	const { searchValue, expandedKeys, autoExpandParent } = treeD
	const loop = (data:any) =>
		data.map((item:any) => {
			const index = item.title.indexOf(searchValue);
			const beforeStr = item.title.substr(0, index);
			debugger
			const afterStr = item.title.substr(index + searchValue.length);
			const title =
				index > -1 ? (
					<span>
						{beforeStr}
						<span className="site-tree-search-value">{searchValue}</span>
						{afterStr}
					</span>
				) : (
					<span>{item.title}</span>
				);
			if (item.children) {
				return { title, key: item.key, children: loop(item.children) };
			}

			return {
				title,
				key: item.key
			};
	})